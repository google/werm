#!/bin/sh
# Copyright 2023 Google LLC
#
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file or at
# https://developers.google.com/open-source/licenses/bsd

compile () {
	src=`mktemp /tmp/XXXXXX.c`
	bin=`mktemp`

	( echo '#include "tm.c"'
	  echo '#include <stdio.h>'

	  cat ) \
	 >| $src

	cc -o $bin -I. $src &&
	echo $bin
}

expect_fail () {
	tout=`mktemp`
	if ! bin=`compile`; then
		echo "tm compilation failed"
	elif $bin 2>&1; then
		echo "tm test binary $bin ($src) exited with unexpected success"
	fi
}

expect_ok () {
	tout=`mktemp`
	if ! bin=`compile`; then
		echo "tm compilation failed"
	elif ! $bin 2>&1; then
		echo "tm test binary $bin ($src) exited with unexpected failure"
	fi
}

echo 'access obj with bad ID'
expect_fail <<'EOF'
int main(int argc, char **argv) { printf("%d", fld(-2, 0)); }
EOF

echo 'valid use of new obj, then access invalid fld'
expect_fail <<'EOF'
int main(int argc, char **argv)
{
	TMint id = tmalloc(5);
	TMint i;

	/* Verify zero-init'd */
	for (i = 0; i < 5; i++) printf("%d,", fld(id, i));

	fld(id, 0) = 42;
	fld(id, 1) = 99;
	fld(id, 2) = 100;
	fld(id, 3) = -5;
	fld(id, 4) = 0xfffff;

	for (i = 0; i < 5; i++) printf("%d,", fld(id, i));
	printf("\n");

	/* fld will exit here */
	fld(id, 6);
}
EOF

echo 'multiple IDs'
expect_fail <<'EOF'
static void allocs(int c) { while (c--) printf("%d,", ~tmalloc(10)); }

int main(int argc, char **argv)
{
	TMint i;

	puts("allocate 100 fresh id's");
	allocs(100);
	printf("\n");

	tmfree(~50);
	tmfree(~75);
	tmfree(~42);

	puts("re-use 3 and allocate 7 fresh id's");
	allocs(10);
	printf("\n");

	tmfree(~41);
	printf("freed an ID, now use it [crash]\n");
	fflush(stdout);
	fld(~41, 0);
}
EOF

echo 'dequeue test'
expect_fail <<'EOF'
int main(int argc, char **argv)
{
	TMint i, deq;

	deq = deqmk();

	deq = deqpushtl(deq, 42);
	printf("pop only value: %d\n", deqpophd(deq));
	printf("is empty, so should have 0, 0: %d, %d\n",
	       deqhd(deq), deqtl(deq));
	deq = deqpushtl(deq, 44);
	deq = deqpushtl(deq, 46);
	printf("pop one of two values: %d\n", deqpophd(deq));
	for (i = 0; i < 20; i++) deq = deqpushtl(deq, i + 47);
	puts("about to pop 21 values to make it empty again");
	for (i = 0; i < 21; i++) printf("%d,", deqpophd(deq));
	putchar('\n');

	tmfree(deq);

	deq = deqmk();
	puts("push 100 values onto freshly-made dequeue");
	for (i = 0; i < 100; i++) {
		deq = deqpushtl(deq, i * i + 9);
		if (deq != -1 && deq != -2) {
			printf("deq has unexpected id: %d\n", deq);
			exit(1);
		}
	}

	printf("%d,%d,%d\n",	deqcellat(deq, 0),
				deqcellat(deq, 25),
				deqcellat(deq, 50));
	for (i = 0; i < 50; i++) printf("%d,", deqpophd(deq));
	putchar('\n');
	printf("%d,%d,%d\n",	deqcellat(deq, 0),
				deqcellat(deq, 25),
				deqcellat(deq, 49));
	for (i = 0; i < 50; i++) printf("%d,", deqpophd(deq));

	printf("\nabout to pop one too many\n");
	fflush(stdout);
	deqpophd(deq);
}
EOF

echo deq wrap-around test
expect_ok <<'EOF'
static void dumpdeqcells(int d)
{
	TMint i, sz = deqsiz(d);

	printf("%d", sz);
	for (i = 0; i < sz; i++) printf(" %d", deqcellat(d, i));
	putchar('\n');
}
int main()
{
	TMint i, deq = deqmk(), val = 0;

	for (i = 0; i < 20; i++) deq =		deqpushtl(deq, val+=3);
	for (i = 0; i < 15; i++) printf("%d ",	deqpophd(deq));
	for (i = 0; i < 12; i++) deq =		deqpushtl(deq, val+=5);
	putchar('\n');

	printf("tl is less than hd? %d\n", deqtl(deq) < deqhd(deq));
	dumpdeqcells(deq);
}
EOF

echo deqpushbyt test
expect_ok <<'EOF'
static void dumpdeq(int d)
{
	TMint i, sz = deqbytsiz(d);

	printf("%d", sz);
	for (i = 0; i <= sz; i++) printf(" %02x", deqbytat(d, i, -1));
	putchar('\n');
}

int main()
{
	TMint deq = deqmk(), *d;

	deq = deqpushbyt(deq, 5);
	deq = deqpushbyt(deq, 0x10);
	deq = deqpushbyt(deq, 0xf66);
	deq = deqpushbyt(deq, 0x20);

	printf("byte count: %d\n", deqbytsiz(deq));
	deq = deqpushbyt(deq, 0x30);
	printf("byte count: %d\n", deqbytsiz(deq));

	d = &fld(deq, deqhd(deq));
	printf("%08x %08x\n", d[0], d[1]);

	tmfree(deq);

	deq = deqmk();
	deq = deqpushbyt(deq, 'a');
	deq = deqpushbyt(deq, 'b');
	deq = deqpushbyt(deq, 'C');
	deq = deqpushbyt(deq, 'X');
	deq = deqpushbyt(deq, 'y');
	deq = deqpushbyt(deq, 'z');
	deq = deqpushbyt(deq, 0);

	d = &fld(deq, deqhd(deq));
	printf("%s\n", d);

	tmfree(deq);
	deq = deqmk();
	printf("byte size after creation: %d\n", deqbytsiz(deq));
	deq = deqpushcop(deq, 0x3066);
	deq = deqpushcop(deq, 0x3059);
	deq = deqpushcop(deq, 0x3068);
	deq = deqpushcop(deq, 0x20b9f);

	d = &fld(deq, deqhd(deq));
	printf("%d %08x %08x %08x %08x\n",
	       deqbytsiz(deq), d[0], d[1], d[2], d[3]);

	deqclear(deq);
	printf("byte size after deqclear: %d\n", deqbytsiz(deq));
	deq = deqpushbyt(deq, 0x49);
	deq = deqpushbyt(deq, 0xe8);
	deq = deqpushbyt(deq, 0xf0);
	deq = deqpushbyt(deq, 0xdd);
	deq = deqpushbyt(deq, 0x0c);
	deq = deqpushbyt(deq, 0x99);
	dumpdeq(deq);
	printf("%02x\n", deqbytat(deq, 3, 0x77));
	dumpdeq(deq);
}
EOF

exit 0
