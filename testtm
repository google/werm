#!/bin/sh
# Copyright 2023 Google LLC
#
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file or at
# https://developers.google.com/open-source/licenses/bsd

expect_fail () {
	src=`mktemp /tmp/XXXXXX.c`
	bin=`mktemp`
	tout=`mktemp`

	( echo '#include "tm.h"'
	  echo '#include "teng"'
	  echo '#include <stdio.h>'

	  cat ) \
	 >| $src

	cc -o $bin -I. $src tm.c ||
	echo unexpected failure compiling $src

	$bin >| $tout 2>&1 &&
		echo "tm test binary $bin ($src) exited with unexpected success"

	sed s,`basename $bin`,[binary_name],g $tout
}

echo 'access obj with bad ID'
expect_fail <<'EOF'
int main(int argc, char **argv) { printf("%d", fld(-2, 0)); }
EOF

echo 'valid use of new obj, then access invalid fld'
expect_fail <<'EOF'
int main(int argc, char **argv)
{
	TMint id = tmalloc(5);
	TMint i;

	/* Verify zero-init'd */
	for (i = 0; i < 5; i++) printf("%d,", fld(id, i));

	fld(id, 0) = 42;
	fld(id, 1) = 99;
	fld(id, 2) = 100;
	fld(id, 3) = -5;
	fld(id, 4) = 0xfffff;

	for (i = 0; i < 5; i++) printf("%d,", fld(id, i));
	printf("\n");

	/* fld will exit here */
	fld(id, 6);
}
EOF

echo 'multiple IDs'
expect_fail <<'EOF'
static void allocs(int c) { while (c--) printf("%d,", ~tmalloc(10)); }

int main(int argc, char **argv)
{
	TMint i;

	puts("allocate 100 fresh id's");
	allocs(100);
	printf("\n");

	tmfree(~50);
	tmfree(~75);
	tmfree(~42);

	puts("re-use 3 and allocate 7 fresh id's");
	allocs(10);
	printf("\n");

	tmfree(~41);
	printf("freed an ID, now use it [crash]\n");
	fflush(stdout);
	fld(~41, 0);
}
EOF

echo 'dequeue test'
expect_fail <<'EOF'
int main(int argc, char **argv)
{
	TMint i, deq;

	deq = deqmk();

	deq = deqpushtl(deq, 42);
	printf("pop only value: %d\n", deqpophd(deq));
	printf("is empty, so should have 0, 0: %d, %d\n",
	       deqhd(deq), deqtl(deq));
	deq = deqpushtl(deq, 44);
	deq = deqpushtl(deq, 46);
	printf("pop one of two values: %d\n", deqpophd(deq));
	for (i = 0; i < 20; i++) deq = deqpushtl(deq, i + 47);
	puts("about to pop 21 values to make it empty again");
	for (i = 0; i < 21; i++) printf("%d,", deqpophd(deq));
	putchar('\n');

	tmfree(deq);

	deq = deqmk();
	puts("push 100 values onto freshly-made dequeue");
	for (i = 0; i < 100; i++) {
		deq = deqpushtl(deq, i * i + 9);
		if (deq != -1 && deq != -2)
			errx(1, "deq has unexpected id: %d", deq);
	}

	for (i = 0; i < 100; i++) printf("%d,", deqpophd(deq));

	printf("\nabout to pop one too many\n");
	fflush(stdout);
	deqpophd(deq);
}
EOF

exit 0
