dtach is a program written in C that emulates the detach feature of
screen, which allows a program to be executed in an environment that is
protected from the controlling terminal. For instance, the program under
the control of dtach would not be affected by the terminal being
disconnected for some reason.

dtach was written because screen did not adequately meet my needs; I did
not need screen's extra features, such as support for multiple
terminals or terminal emulation support. screen was also too big,
bulky, and had source code that was difficult to understand.

screen also interfered with my use of full-screen applications such as
emacs and ircII, due to its excessive interpretation of the stream between
the program and the attached terminals. dtach does not have a terminal
emulation layer, and passes the raw output stream of the program to the
attached terminals. The only input processing that dtach does perform is
scanning for the detach character (which signals dtach to detach from
the program) and processing the suspend key (which tells dtach to
temporarily suspend itself without affecting the running program), and both
of these can both be disabled if desired.

Contrary to screen, dtach has minimal features, and is extremely tiny.
This allows dtach to be more easily audited for bugs and security
holes, and makes it accessible in environments where space is limited,
such as on rescue disks.

dtach has only been tested on the Linux/x86 platform, however it should
be easily portable to other variants of Unix. It currently assumes that
the host system uses POSIX termios, and has a working forkpty function
available.

dtach may need access to various devices in the filesystem depending on what
forkpty does. For example, dtach on Linux usually needs access to /dev/ptmx
and /dev/pts.
