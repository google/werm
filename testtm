#!/bin/sh
# Copyright 2023 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

expect_fail () {
	src=`mktemp /tmp/XXXXXX.c`
	bin=`mktemp`
	tout=`mktemp`

	( echo '#include "tm.h"'
	  echo '#include <stdio.h>'

	  cat ) \
	 >| $src

	cc -fsanitize=address -g -o $bin -I. $src tm.c ||
	echo unexpected failure compiling $src

	$bin >| $tout 2>&1 &&
		echo "tm test binary $bin ($src) exited with unexpected success"

	sed s,`basename $bin`,[binary_name],g $tout
}

echo 'access obj with bad ID'
expect_fail <<'EOF'
int main(int argc, char **argv) { printf("%d", fld(-2, 0)); }
EOF

echo 'valid use of new obj, then access invalid fld'
expect_fail <<'EOF'
int main(int argc, char **argv)
{
	TMint id = tmalloc(5);
	TMint i;

	/* Verify zero-init'd */
	for (i = 0; i < 5; i++) printf("%d,", fld(id, i));

	fld(id, 0) = 42;
	fld(id, 1) = 99;
	fld(id, 2) = 100;
	fld(id, 3) = -5;
	fld(id, 4) = 0xfffff;

	for (i = 0; i < 5; i++) printf("%d,", fld(id, i));
	printf("\n");

	/* fld will exit here */
	fld(id, 6);
}
EOF

echo 'multiple IDs'
expect_fail <<'EOF'
static void allocs(int c) { while (c--) printf("%d,", ~tmalloc(10)); }

int main(int argc, char **argv)
{
	TMint i;

	puts("allocate 100 fresh id's");
	allocs(100);
	printf("\n");

	tmfree(~50);
	tmfree(~75);
	tmfree(~42);

	puts("re-use 3 and allocate 7 fresh id's");
	allocs(10);
	printf("\n");

	tmfree(~41);
	printf("freed an ID, now use it [crash]\n");
	fflush(stdout);
	fld(~41, 0);
}
EOF

exit 0
